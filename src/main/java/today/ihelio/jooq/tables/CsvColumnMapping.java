/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import today.ihelio.jooq.Keys;
import today.ihelio.jooq.Minance;
import today.ihelio.jooq.tables.records.CsvColumnMappingRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CsvColumnMapping extends TableImpl<CsvColumnMappingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>minance.csv_column_mapping</code>
     */
    public static final CsvColumnMapping CSV_COLUMN_MAPPING = new CsvColumnMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CsvColumnMappingRecord> getRecordType() {
        return CsvColumnMappingRecord.class;
    }

    /**
     * The column <code>minance.csv_column_mapping.ccm_id</code>.
     */
    public final TableField<CsvColumnMappingRecord, Integer> CCM_ID = createField(DSL.name("ccm_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>minance.csv_column_mapping.account_id</code>.
     */
    public final TableField<CsvColumnMappingRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>minance.csv_column_mapping.transaction_column</code>.
     */
    public final TableField<CsvColumnMappingRecord, String> TRANSACTION_COLUMN = createField(DSL.name("transaction_column"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>minance.csv_column_mapping.input_column</code>.
     */
    public final TableField<CsvColumnMappingRecord, String> INPUT_COLUMN = createField(DSL.name("input_column"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>minance.csv_column_mapping.date_format</code>.
     */
    public final TableField<CsvColumnMappingRecord, String> DATE_FORMAT = createField(DSL.name("date_format"), SQLDataType.VARCHAR(20), this, "");

    private CsvColumnMapping(Name alias, Table<CsvColumnMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private CsvColumnMapping(Name alias, Table<CsvColumnMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>minance.csv_column_mapping</code> table reference
     */
    public CsvColumnMapping(String alias) {
        this(DSL.name(alias), CSV_COLUMN_MAPPING);
    }

    /**
     * Create an aliased <code>minance.csv_column_mapping</code> table reference
     */
    public CsvColumnMapping(Name alias) {
        this(alias, CSV_COLUMN_MAPPING);
    }

    /**
     * Create a <code>minance.csv_column_mapping</code> table reference
     */
    public CsvColumnMapping() {
        this(DSL.name("csv_column_mapping"), null);
    }

    public <O extends Record> CsvColumnMapping(Table<O> child, ForeignKey<O, CsvColumnMappingRecord> key) {
        super(child, key, CSV_COLUMN_MAPPING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Minance.MINANCE;
    }

    @Override
    public Identity<CsvColumnMappingRecord, Integer> getIdentity() {
        return (Identity<CsvColumnMappingRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CsvColumnMappingRecord> getPrimaryKey() {
        return Keys.KEY_CSV_COLUMN_MAPPING_PRIMARY;
    }

    @Override
    public List<UniqueKey<CsvColumnMappingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CSV_COLUMN_MAPPING_ACCOUNT_UNIQUE);
    }

    @Override
    public List<ForeignKey<CsvColumnMappingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CSV_COLUMN_MAPPING_IBFK_1);
    }

    private transient Accounts _accounts;

    /**
     * Get the implicit join path to the <code>minance.accounts</code> table.
     */
    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.CSV_COLUMN_MAPPING_IBFK_1);

        return _accounts;
    }

    @Override
    public CsvColumnMapping as(String alias) {
        return new CsvColumnMapping(DSL.name(alias), this);
    }

    @Override
    public CsvColumnMapping as(Name alias) {
        return new CsvColumnMapping(alias, this);
    }

    @Override
    public CsvColumnMapping as(Table<?> alias) {
        return new CsvColumnMapping(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CsvColumnMapping rename(String name) {
        return new CsvColumnMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CsvColumnMapping rename(Name name) {
        return new CsvColumnMapping(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CsvColumnMapping rename(Table<?> name) {
        return new CsvColumnMapping(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
