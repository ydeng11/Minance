/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import today.ihelio.jooq.tables.RawCategoryToMinanceCategory;
import today.ihelio.jooq.tables.records.RawCategoryToMinanceCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RawCategoryToMinanceCategoryDao extends DAOImpl<RawCategoryToMinanceCategoryRecord, today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory, Integer> {

    /**
     * Create a new RawCategoryToMinanceCategoryDao without any configuration
     */
    public RawCategoryToMinanceCategoryDao() {
        super(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY, today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory.class);
    }

    /**
     * Create a new RawCategoryToMinanceCategoryDao with an attached
     * configuration
     */
    public RawCategoryToMinanceCategoryDao(Configuration configuration) {
        super(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY, today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory.class, configuration);
    }

    @Override
    public Integer getId(today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory object) {
        return object.getRcToMcId();
    }

    /**
     * Fetch records that have <code>rc_to_mc_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory> fetchRangeOfRcToMcId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.RC_TO_MC_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rc_to_mc_id IN (values)</code>
     */
    public List<today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory> fetchByRcToMcId(Integer... values) {
        return fetch(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.RC_TO_MC_ID, values);
    }

    /**
     * Fetch a unique record that has <code>rc_to_mc_id = value</code>
     */
    public today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory fetchOneByRcToMcId(Integer value) {
        return fetchOne(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.RC_TO_MC_ID, value);
    }

    /**
     * Fetch a unique record that has <code>rc_to_mc_id = value</code>
     */
    public Optional<today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory> fetchOptionalByRcToMcId(Integer value) {
        return fetchOptional(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.RC_TO_MC_ID, value);
    }

    /**
     * Fetch records that have <code>raw_category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory> fetchRangeOfRawCategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.RAW_CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>raw_category IN (values)</code>
     */
    public List<today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory> fetchByRawCategory(String... values) {
        return fetch(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.RAW_CATEGORY, values);
    }

    /**
     * Fetch records that have <code>minance_category_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory> fetchRangeOfMinanceCategoryId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.MINANCE_CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>minance_category_id IN (values)</code>
     */
    public List<today.ihelio.jooq.tables.pojos.RawCategoryToMinanceCategory> fetchByMinanceCategoryId(Integer... values) {
        return fetch(RawCategoryToMinanceCategory.RAW_CATEGORY_TO_MINANCE_CATEGORY.MINANCE_CATEGORY_ID, values);
    }
}
