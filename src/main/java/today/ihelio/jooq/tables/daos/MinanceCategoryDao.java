/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import today.ihelio.jooq.tables.MinanceCategory;
import today.ihelio.jooq.tables.records.MinanceCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MinanceCategoryDao extends DAOImpl<MinanceCategoryRecord, today.ihelio.jooq.tables.pojos.MinanceCategory, Integer> {

    /**
     * Create a new MinanceCategoryDao without any configuration
     */
    public MinanceCategoryDao() {
        super(MinanceCategory.MINANCE_CATEGORY, today.ihelio.jooq.tables.pojos.MinanceCategory.class);
    }

    /**
     * Create a new MinanceCategoryDao with an attached configuration
     */
    public MinanceCategoryDao(Configuration configuration) {
        super(MinanceCategory.MINANCE_CATEGORY, today.ihelio.jooq.tables.pojos.MinanceCategory.class, configuration);
    }

    @Override
    public Integer getId(today.ihelio.jooq.tables.pojos.MinanceCategory object) {
        return object.getMCategoryId();
    }

    /**
     * Fetch records that have <code>m_category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<today.ihelio.jooq.tables.pojos.MinanceCategory> fetchRangeOfMCategoryId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(MinanceCategory.MINANCE_CATEGORY.M_CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>m_category_id IN (values)</code>
     */
    public List<today.ihelio.jooq.tables.pojos.MinanceCategory> fetchByMCategoryId(Integer... values) {
        return fetch(MinanceCategory.MINANCE_CATEGORY.M_CATEGORY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>m_category_id = value</code>
     */
    public today.ihelio.jooq.tables.pojos.MinanceCategory fetchOneByMCategoryId(Integer value) {
        return fetchOne(MinanceCategory.MINANCE_CATEGORY.M_CATEGORY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>m_category_id = value</code>
     */
    public Optional<today.ihelio.jooq.tables.pojos.MinanceCategory> fetchOptionalByMCategoryId(Integer value) {
        return fetchOptional(MinanceCategory.MINANCE_CATEGORY.M_CATEGORY_ID, value);
    }

    /**
     * Fetch records that have <code>category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<today.ihelio.jooq.tables.pojos.MinanceCategory> fetchRangeOfCategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(MinanceCategory.MINANCE_CATEGORY.CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category IN (values)</code>
     */
    public List<today.ihelio.jooq.tables.pojos.MinanceCategory> fetchByCategory(String... values) {
        return fetch(MinanceCategory.MINANCE_CATEGORY.CATEGORY, values);
    }

    /**
     * Fetch a unique record that has <code>category = value</code>
     */
    public today.ihelio.jooq.tables.pojos.MinanceCategory fetchOneByCategory(String value) {
        return fetchOne(MinanceCategory.MINANCE_CATEGORY.CATEGORY, value);
    }

    /**
     * Fetch a unique record that has <code>category = value</code>
     */
    public Optional<today.ihelio.jooq.tables.pojos.MinanceCategory> fetchOptionalByCategory(String value) {
        return fetchOptional(MinanceCategory.MINANCE_CATEGORY.CATEGORY, value);
    }
}
