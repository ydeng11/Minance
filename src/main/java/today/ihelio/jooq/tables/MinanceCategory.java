/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import today.ihelio.jooq.DefaultSchema;
import today.ihelio.jooq.Keys;
import today.ihelio.jooq.tables.RawCategoryToMinanceCategory.RawCategoryToMinanceCategoryPath;
import today.ihelio.jooq.tables.records.MinanceCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MinanceCategory extends TableImpl<MinanceCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>minance_category</code>
     */
    public static final MinanceCategory MINANCE_CATEGORY = new MinanceCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MinanceCategoryRecord> getRecordType() {
        return MinanceCategoryRecord.class;
    }

    /**
     * The column <code>minance_category.m_category_id</code>.
     */
    public final TableField<MinanceCategoryRecord, Integer> M_CATEGORY_ID = createField(DSL.name("m_category_id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>minance_category.category</code>.
     */
    public final TableField<MinanceCategoryRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB.nullable(false), this, "");

    private MinanceCategory(Name alias, Table<MinanceCategoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MinanceCategory(Name alias, Table<MinanceCategoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>minance_category</code> table reference
     */
    public MinanceCategory(String alias) {
        this(DSL.name(alias), MINANCE_CATEGORY);
    }

    /**
     * Create an aliased <code>minance_category</code> table reference
     */
    public MinanceCategory(Name alias) {
        this(alias, MINANCE_CATEGORY);
    }

    /**
     * Create a <code>minance_category</code> table reference
     */
    public MinanceCategory() {
        this(DSL.name("minance_category"), null);
    }

    public <O extends Record> MinanceCategory(Table<O> path, ForeignKey<O, MinanceCategoryRecord> childPath, InverseForeignKey<O, MinanceCategoryRecord> parentPath) {
        super(path, childPath, parentPath, MINANCE_CATEGORY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MinanceCategoryPath extends MinanceCategory implements Path<MinanceCategoryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MinanceCategoryPath(Table<O> path, ForeignKey<O, MinanceCategoryRecord> childPath, InverseForeignKey<O, MinanceCategoryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MinanceCategoryPath(Name alias, Table<MinanceCategoryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MinanceCategoryPath as(String alias) {
            return new MinanceCategoryPath(DSL.name(alias), this);
        }

        @Override
        public MinanceCategoryPath as(Name alias) {
            return new MinanceCategoryPath(alias, this);
        }

        @Override
        public MinanceCategoryPath as(Table<?> alias) {
            return new MinanceCategoryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<MinanceCategoryRecord, Integer> getIdentity() {
        return (Identity<MinanceCategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MinanceCategoryRecord> getPrimaryKey() {
        return Keys.MINANCE_CATEGORY__PK_MINANCE_CATEGORY;
    }

    @Override
    public List<UniqueKey<MinanceCategoryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MINANCE_CATEGORY__UK_MINANCE_CATEGORY_125424204);
    }

    private transient RawCategoryToMinanceCategoryPath _rawCategoryToMinanceCategory;

    /**
     * Get the implicit to-many join path to the
     * <code>raw_category_to_minance_category</code> table
     */
    public RawCategoryToMinanceCategoryPath rawCategoryToMinanceCategory() {
        if (_rawCategoryToMinanceCategory == null)
            _rawCategoryToMinanceCategory = new RawCategoryToMinanceCategoryPath(this, null, Keys.RAW_CATEGORY_TO_MINANCE_CATEGORY__FK_RAW_CATEGORY_TO_MINANCE_CATEGORY_PK_MINANCE_CATEGORY.getInverseKey());

        return _rawCategoryToMinanceCategory;
    }

    @Override
    public MinanceCategory as(String alias) {
        return new MinanceCategory(DSL.name(alias), this);
    }

    @Override
    public MinanceCategory as(Name alias) {
        return new MinanceCategory(alias, this);
    }

    @Override
    public MinanceCategory as(Table<?> alias) {
        return new MinanceCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MinanceCategory rename(String name) {
        return new MinanceCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MinanceCategory rename(Name name) {
        return new MinanceCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MinanceCategory rename(Table<?> name) {
        return new MinanceCategory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MinanceCategory where(Condition condition) {
        return new MinanceCategory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MinanceCategory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MinanceCategory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MinanceCategory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MinanceCategory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MinanceCategory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MinanceCategory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MinanceCategory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MinanceCategory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MinanceCategory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
