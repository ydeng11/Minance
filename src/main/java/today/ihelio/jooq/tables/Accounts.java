/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import today.ihelio.jooq.Indexes;
import today.ihelio.jooq.Keys;
import today.ihelio.jooq.Minance;
import today.ihelio.jooq.tables.records.AccountsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounts extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>minance.accounts</code>
     */
    public static final Accounts ACCOUNTS = new Accounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>minance.accounts.account_id</code>.
     */
    public final TableField<AccountsRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>minance.accounts.bank_id</code>.
     */
    public final TableField<AccountsRecord, Integer> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>minance.accounts.bank_name</code>.
     */
    public final TableField<AccountsRecord, String> BANK_NAME = createField(DSL.name("bank_name"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>minance.accounts.account_name</code>.
     */
    public final TableField<AccountsRecord, String> ACCOUNT_NAME = createField(DSL.name("account_name"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>minance.accounts.account_type</code>.
     */
    public final TableField<AccountsRecord, String> ACCOUNT_TYPE = createField(DSL.name("account_type"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>minance.accounts.init_balance</code>.
     */
    public final TableField<AccountsRecord, Long> INIT_BALANCE = createField(DSL.name("init_balance"), SQLDataType.BIGINT, this, "");

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>minance.accounts</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>minance.accounts</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS);
    }

    /**
     * Create a <code>minance.accounts</code> table reference
     */
    public Accounts() {
        this(DSL.name("accounts"), null);
    }

    public <O extends Record> Accounts(Table<O> child, ForeignKey<O, AccountsRecord> key) {
        super(child, key, ACCOUNTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Minance.MINANCE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACCOUNTS_BANK_ID);
    }

    @Override
    public Identity<AccountsRecord, Integer> getIdentity() {
        return (Identity<AccountsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ACCOUNTS_ACCOUNT_UNIQUE);
    }

    @Override
    public List<ForeignKey<AccountsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNTS_IBFK_1);
    }

    private transient Banks _banks;

    /**
     * Get the implicit join path to the <code>minance.banks</code> table.
     */
    public Banks banks() {
        if (_banks == null)
            _banks = new Banks(this, Keys.ACCOUNTS_IBFK_1);

        return _banks;
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    @Override
    public Accounts as(Table<?> alias) {
        return new Accounts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Table<?> name) {
        return new Accounts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
