/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import today.ihelio.jooq.Keys;
import today.ihelio.jooq.Minance;
import today.ihelio.jooq.tables.records.TransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>minance.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>minance.transactions.transaction_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>minance.transactions.account_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>minance.transactions.category</code>.
     */
    public final TableField<TransactionsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>minance.transactions.description</code>.
     */
    public final TableField<TransactionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>minance.transactions.transaction_type</code>.
     */
    public final TableField<TransactionsRecord, String> TRANSACTION_TYPE = createField(DSL.name("transaction_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>minance.transactions.transaction_date</code>.
     */
    public final TableField<TransactionsRecord, LocalDate> TRANSACTION_DATE = createField(DSL.name("transaction_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>minance.transactions.post_date</code>.
     */
    public final TableField<TransactionsRecord, LocalDate> POST_DATE = createField(DSL.name("post_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>minance.transactions.memo</code>.
     */
    public final TableField<TransactionsRecord, String> MEMO = createField(DSL.name("memo"), SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>minance.transactions.amount</code>.
     */
    public final TableField<TransactionsRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>minance.transactions.bank_name</code>.
     */
    public final TableField<TransactionsRecord, String> BANK_NAME = createField(DSL.name("bank_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>minance.transactions.account_name</code>.
     */
    public final TableField<TransactionsRecord, String> ACCOUNT_NAME = createField(DSL.name("account_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>minance.transactions.is_duplicate</code>.
     */
    public final TableField<TransactionsRecord, String> IS_DUPLICATE = createField(DSL.name("is_duplicate"), SQLDataType.VARCHAR(1).defaultValue(DSL.inline("n", SQLDataType.VARCHAR)), this, "");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>minance.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>minance.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>minance.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> child, ForeignKey<O, TransactionsRecord> key) {
        super(child, key, TRANSACTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Minance.MINANCE;
    }

    @Override
    public Identity<TransactionsRecord, Integer> getIdentity() {
        return (Identity<TransactionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACTIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransactionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRANSACTIONS_TRANSACTION_UNIQUE);
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTIONS_IBFK_1);
    }

    private transient Accounts _accounts;

    /**
     * Get the implicit join path to the <code>minance.accounts</code> table.
     */
    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.TRANSACTIONS_IBFK_1);

        return _accounts;
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, String, String, String, LocalDate, LocalDate, String, Long, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDate, ? super LocalDate, ? super String, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super LocalDate, ? super LocalDate, ? super String, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
