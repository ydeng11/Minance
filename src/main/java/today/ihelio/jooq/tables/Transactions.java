/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import today.ihelio.jooq.DefaultSchema;
import today.ihelio.jooq.Keys;
import today.ihelio.jooq.tables.Accounts.AccountsPath;
import today.ihelio.jooq.tables.records.TransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>transactions.transaction_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>transactions.account_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>transactions.category</code>.
     */
    public final TableField<TransactionsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.description</code>.
     */
    public final TableField<TransactionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.transaction_type</code>.
     */
    public final TableField<TransactionsRecord, String> TRANSACTION_TYPE = createField(DSL.name("transaction_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.transaction_date</code>.
     */
    public final TableField<TransactionsRecord, LocalDate> TRANSACTION_DATE = createField(DSL.name("transaction_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>transactions.post_date</code>.
     */
    public final TableField<TransactionsRecord, LocalDate> POST_DATE = createField(DSL.name("post_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>transactions.memo</code>.
     */
    public final TableField<TransactionsRecord, String> MEMO = createField(DSL.name("memo"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.address</code>.
     */
    public final TableField<TransactionsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.city</code>.
     */
    public final TableField<TransactionsRecord, String> CITY = createField(DSL.name("city"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.state_name</code>.
     */
    public final TableField<TransactionsRecord, String> STATE_NAME = createField(DSL.name("state_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.country</code>.
     */
    public final TableField<TransactionsRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.zipcode</code>.
     */
    public final TableField<TransactionsRecord, String> ZIPCODE = createField(DSL.name("zipcode"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.amount</code>.
     */
    public final TableField<TransactionsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(9, 2), this, "");

    /**
     * The column <code>transactions.bank_name</code>.
     */
    public final TableField<TransactionsRecord, String> BANK_NAME = createField(DSL.name("bank_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.account_name</code>.
     */
    public final TableField<TransactionsRecord, String> ACCOUNT_NAME = createField(DSL.name("account_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.upload_time</code>.
     */
    public final TableField<TransactionsRecord, String> UPLOAD_TIME = createField(DSL.name("upload_time"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.is_duplicate</code>.
     */
    public final TableField<TransactionsRecord, Integer> IS_DUPLICATE = createField(DSL.name("is_duplicate"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> path, ForeignKey<O, TransactionsRecord> childPath, InverseForeignKey<O, TransactionsRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionsPath extends Transactions implements Path<TransactionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TransactionsPath(Table<O> path, ForeignKey<O, TransactionsRecord> childPath, InverseForeignKey<O, TransactionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionsPath(Name alias, Table<TransactionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionsPath as(String alias) {
            return new TransactionsPath(DSL.name(alias), this);
        }

        @Override
        public TransactionsPath as(Name alias) {
            return new TransactionsPath(alias, this);
        }

        @Override
        public TransactionsPath as(Table<?> alias) {
            return new TransactionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TransactionsRecord, Integer> getIdentity() {
        return (Identity<TransactionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS__PK_TRANSACTIONS;
    }

    @Override
    public List<UniqueKey<TransactionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TRANSACTIONS__UK_TRANSACTIONS_6933421);
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTIONS__FK_TRANSACTIONS_PK_ACCOUNTS);
    }

    private transient AccountsPath _accounts;

    /**
     * Get the implicit join path to the <code>accounts</code> table.
     */
    public AccountsPath accounts() {
        if (_accounts == null)
            _accounts = new AccountsPath(this, Keys.TRANSACTIONS__FK_TRANSACTIONS_PK_ACCOUNTS, null);

        return _accounts;
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition condition) {
        return new Transactions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
