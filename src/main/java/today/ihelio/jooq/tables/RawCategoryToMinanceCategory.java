/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import today.ihelio.jooq.DefaultSchema;
import today.ihelio.jooq.Keys;
import today.ihelio.jooq.tables.records.RawCategoryToMinanceCategoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RawCategoryToMinanceCategory extends TableImpl<RawCategoryToMinanceCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>raw_category_to_minance_category</code>
     */
    public static final RawCategoryToMinanceCategory RAW_CATEGORY_TO_MINANCE_CATEGORY = new RawCategoryToMinanceCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RawCategoryToMinanceCategoryRecord> getRecordType() {
        return RawCategoryToMinanceCategoryRecord.class;
    }

    /**
     * The column <code>raw_category_to_minance_category.rc_to_mc_id</code>.
     */
    public final TableField<RawCategoryToMinanceCategoryRecord, Integer> RC_TO_MC_ID = createField(DSL.name("rc_to_mc_id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>raw_category_to_minance_category.raw_category</code>.
     */
    public final TableField<RawCategoryToMinanceCategoryRecord, String> RAW_CATEGORY = createField(DSL.name("raw_category"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>raw_category_to_minance_category.minance_category_id</code>.
     */
    public final TableField<RawCategoryToMinanceCategoryRecord, Integer> MINANCE_CATEGORY_ID = createField(DSL.name("minance_category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private RawCategoryToMinanceCategory(Name alias, Table<RawCategoryToMinanceCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private RawCategoryToMinanceCategory(Name alias, Table<RawCategoryToMinanceCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>raw_category_to_minance_category</code> table
     * reference
     */
    public RawCategoryToMinanceCategory(String alias) {
        this(DSL.name(alias), RAW_CATEGORY_TO_MINANCE_CATEGORY);
    }

    /**
     * Create an aliased <code>raw_category_to_minance_category</code> table
     * reference
     */
    public RawCategoryToMinanceCategory(Name alias) {
        this(alias, RAW_CATEGORY_TO_MINANCE_CATEGORY);
    }

    /**
     * Create a <code>raw_category_to_minance_category</code> table reference
     */
    public RawCategoryToMinanceCategory() {
        this(DSL.name("raw_category_to_minance_category"), null);
    }

    public <O extends Record> RawCategoryToMinanceCategory(Table<O> child, ForeignKey<O, RawCategoryToMinanceCategoryRecord> key) {
        super(child, key, RAW_CATEGORY_TO_MINANCE_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<RawCategoryToMinanceCategoryRecord, Integer> getIdentity() {
        return (Identity<RawCategoryToMinanceCategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RawCategoryToMinanceCategoryRecord> getPrimaryKey() {
        return Keys.RAW_CATEGORY_TO_MINANCE_CATEGORY__PK_RAW_CATEGORY_TO_MINANCE_CATEGORY;
    }

    @Override
    public List<ForeignKey<RawCategoryToMinanceCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RAW_CATEGORY_TO_MINANCE_CATEGORY__FK_RAW_CATEGORY_TO_MINANCE_CATEGORY_PK_MINANCE_CATEGORY);
    }

    private transient MinanceCategory _minanceCategory;

    /**
     * Get the implicit join path to the <code>minance_category</code> table.
     */
    public MinanceCategory minanceCategory() {
        if (_minanceCategory == null)
            _minanceCategory = new MinanceCategory(this, Keys.RAW_CATEGORY_TO_MINANCE_CATEGORY__FK_RAW_CATEGORY_TO_MINANCE_CATEGORY_PK_MINANCE_CATEGORY);

        return _minanceCategory;
    }

    @Override
    public RawCategoryToMinanceCategory as(String alias) {
        return new RawCategoryToMinanceCategory(DSL.name(alias), this);
    }

    @Override
    public RawCategoryToMinanceCategory as(Name alias) {
        return new RawCategoryToMinanceCategory(alias, this);
    }

    @Override
    public RawCategoryToMinanceCategory as(Table<?> alias) {
        return new RawCategoryToMinanceCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RawCategoryToMinanceCategory rename(String name) {
        return new RawCategoryToMinanceCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RawCategoryToMinanceCategory rename(Name name) {
        return new RawCategoryToMinanceCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RawCategoryToMinanceCategory rename(Table<?> name) {
        return new RawCategoryToMinanceCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
