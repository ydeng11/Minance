/*
 * This file is generated by jOOQ.
 */
package today.ihelio.jooq.tables.records;


import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;

import today.ihelio.jooq.tables.Transactions;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsRecord extends UpdatableRecordImpl<TransactionsRecord> implements Record13<Integer, Integer, String, String, String, LocalDate, LocalDate, String, String, Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>minance.transactions.transaction_id</code>.
     */
    public void setTransactionId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>minance.transactions.transaction_id</code>.
     */
    public Integer getTransactionId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>minance.transactions.account_id</code>.
     */
    public void setAccountId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>minance.transactions.account_id</code>.
     */
    public Integer getAccountId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>minance.transactions.category</code>.
     */
    public void setCategory(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>minance.transactions.category</code>.
     */
    public String getCategory() {
        return (String) get(2);
    }

    /**
     * Setter for <code>minance.transactions.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>minance.transactions.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>minance.transactions.transaction_type</code>.
     */
    public void setTransactionType(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>minance.transactions.transaction_type</code>.
     */
    public String getTransactionType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>minance.transactions.transaction_date</code>.
     */
    public void setTransactionDate(LocalDate value) {
        set(5, value);
    }

    /**
     * Getter for <code>minance.transactions.transaction_date</code>.
     */
    public LocalDate getTransactionDate() {
        return (LocalDate) get(5);
    }

    /**
     * Setter for <code>minance.transactions.post_date</code>.
     */
    public void setPostDate(LocalDate value) {
        set(6, value);
    }

    /**
     * Getter for <code>minance.transactions.post_date</code>.
     */
    public LocalDate getPostDate() {
        return (LocalDate) get(6);
    }

    /**
     * Setter for <code>minance.transactions.memo</code>.
     */
    public void setMemo(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>minance.transactions.memo</code>.
     */
    public String getMemo() {
        return (String) get(7);
    }

    /**
     * Setter for <code>minance.transactions.address</code>.
     */
    public void setAddress(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>minance.transactions.address</code>.
     */
    public String getAddress() {
        return (String) get(8);
    }

    /**
     * Setter for <code>minance.transactions.amount</code>.
     */
    public void setAmount(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>minance.transactions.amount</code>.
     */
    public Long getAmount() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>minance.transactions.bank_name</code>.
     */
    public void setBankName(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>minance.transactions.bank_name</code>.
     */
    public String getBankName() {
        return (String) get(10);
    }

    /**
     * Setter for <code>minance.transactions.account_name</code>.
     */
    public void setAccountName(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>minance.transactions.account_name</code>.
     */
    public String getAccountName() {
        return (String) get(11);
    }

    /**
     * Setter for <code>minance.transactions.is_duplicate</code>.
     */
    public void setIsDuplicate(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>minance.transactions.is_duplicate</code>.
     */
    public String getIsDuplicate() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, String, String, String, LocalDate, LocalDate, String, String, Long, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Integer, Integer, String, String, String, LocalDate, LocalDate, String, String, Long, String, String, String> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Transactions.TRANSACTIONS.TRANSACTION_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Transactions.TRANSACTIONS.ACCOUNT_ID;
    }

    @Override
    public Field<String> field3() {
        return Transactions.TRANSACTIONS.CATEGORY;
    }

    @Override
    public Field<String> field4() {
        return Transactions.TRANSACTIONS.DESCRIPTION;
    }

    @Override
    public Field<String> field5() {
        return Transactions.TRANSACTIONS.TRANSACTION_TYPE;
    }

    @Override
    public Field<LocalDate> field6() {
        return Transactions.TRANSACTIONS.TRANSACTION_DATE;
    }

    @Override
    public Field<LocalDate> field7() {
        return Transactions.TRANSACTIONS.POST_DATE;
    }

    @Override
    public Field<String> field8() {
        return Transactions.TRANSACTIONS.MEMO;
    }

    @Override
    public Field<String> field9() {
        return Transactions.TRANSACTIONS.ADDRESS;
    }

    @Override
    public Field<Long> field10() {
        return Transactions.TRANSACTIONS.AMOUNT;
    }

    @Override
    public Field<String> field11() {
        return Transactions.TRANSACTIONS.BANK_NAME;
    }

    @Override
    public Field<String> field12() {
        return Transactions.TRANSACTIONS.ACCOUNT_NAME;
    }

    @Override
    public Field<String> field13() {
        return Transactions.TRANSACTIONS.IS_DUPLICATE;
    }

    @Override
    public Integer component1() {
        return getTransactionId();
    }

    @Override
    public Integer component2() {
        return getAccountId();
    }

    @Override
    public String component3() {
        return getCategory();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public String component5() {
        return getTransactionType();
    }

    @Override
    public LocalDate component6() {
        return getTransactionDate();
    }

    @Override
    public LocalDate component7() {
        return getPostDate();
    }

    @Override
    public String component8() {
        return getMemo();
    }

    @Override
    public String component9() {
        return getAddress();
    }

    @Override
    public Long component10() {
        return getAmount();
    }

    @Override
    public String component11() {
        return getBankName();
    }

    @Override
    public String component12() {
        return getAccountName();
    }

    @Override
    public String component13() {
        return getIsDuplicate();
    }

    @Override
    public Integer value1() {
        return getTransactionId();
    }

    @Override
    public Integer value2() {
        return getAccountId();
    }

    @Override
    public String value3() {
        return getCategory();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public String value5() {
        return getTransactionType();
    }

    @Override
    public LocalDate value6() {
        return getTransactionDate();
    }

    @Override
    public LocalDate value7() {
        return getPostDate();
    }

    @Override
    public String value8() {
        return getMemo();
    }

    @Override
    public String value9() {
        return getAddress();
    }

    @Override
    public Long value10() {
        return getAmount();
    }

    @Override
    public String value11() {
        return getBankName();
    }

    @Override
    public String value12() {
        return getAccountName();
    }

    @Override
    public String value13() {
        return getIsDuplicate();
    }

    @Override
    public TransactionsRecord value1(Integer value) {
        setTransactionId(value);
        return this;
    }

    @Override
    public TransactionsRecord value2(Integer value) {
        setAccountId(value);
        return this;
    }

    @Override
    public TransactionsRecord value3(String value) {
        setCategory(value);
        return this;
    }

    @Override
    public TransactionsRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public TransactionsRecord value5(String value) {
        setTransactionType(value);
        return this;
    }

    @Override
    public TransactionsRecord value6(LocalDate value) {
        setTransactionDate(value);
        return this;
    }

    @Override
    public TransactionsRecord value7(LocalDate value) {
        setPostDate(value);
        return this;
    }

    @Override
    public TransactionsRecord value8(String value) {
        setMemo(value);
        return this;
    }

    @Override
    public TransactionsRecord value9(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public TransactionsRecord value10(Long value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionsRecord value11(String value) {
        setBankName(value);
        return this;
    }

    @Override
    public TransactionsRecord value12(String value) {
        setAccountName(value);
        return this;
    }

    @Override
    public TransactionsRecord value13(String value) {
        setIsDuplicate(value);
        return this;
    }

    @Override
    public TransactionsRecord values(Integer value1, Integer value2, String value3, String value4, String value5, LocalDate value6, LocalDate value7, String value8, String value9, Long value10, String value11, String value12, String value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionsRecord
     */
    public TransactionsRecord() {
        super(Transactions.TRANSACTIONS);
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(Integer transactionId, Integer accountId, String category, String description, String transactionType, LocalDate transactionDate, LocalDate postDate, String memo, String address, Long amount, String bankName, String accountName, String isDuplicate) {
        super(Transactions.TRANSACTIONS);

        setTransactionId(transactionId);
        setAccountId(accountId);
        setCategory(category);
        setDescription(description);
        setTransactionType(transactionType);
        setTransactionDate(transactionDate);
        setPostDate(postDate);
        setMemo(memo);
        setAddress(address);
        setAmount(amount);
        setBankName(bankName);
        setAccountName(accountName);
        setIsDuplicate(isDuplicate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(today.ihelio.jooq.tables.pojos.Transactions value) {
        super(Transactions.TRANSACTIONS);

        if (value != null) {
            setTransactionId(value.getTransactionId());
            setAccountId(value.getAccountId());
            setCategory(value.getCategory());
            setDescription(value.getDescription());
            setTransactionType(value.getTransactionType());
            setTransactionDate(value.getTransactionDate());
            setPostDate(value.getPostDate());
            setMemo(value.getMemo());
            setAddress(value.getAddress());
            setAmount(value.getAmount());
            setBankName(value.getBankName());
            setAccountName(value.getAccountName());
            setIsDuplicate(value.getIsDuplicate());
            resetChangedOnNotNull();
        }
    }
}
